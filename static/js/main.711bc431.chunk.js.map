{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Home","ListView","to","DetailView","match","params","name","NoMatch","App","props","state","isLoading","this","setState","items","path","exact","component","Component","Column","fetch","then","Response","json","data","map","item","index","key","React","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"iTAIA,SAASA,IACP,OAAO,8CAGT,SAASC,IACP,OACE,6BACE,4CACA,4BACE,kBAAC,IAAD,CAAMC,GAAG,cAAT,WACA,6BACA,kBAAC,IAAD,CAAMA,GAAG,eAAT,cAMR,SAASC,EAAT,GAAgC,IAAVC,EAAS,EAATA,MACpB,OAAO,4CAAkBA,EAAMC,OAAOC,KAA/B,KAGT,SAASC,IACP,OAAO,8D,IAGHC,E,YAEJ,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KACDC,MAAQ,CACXC,WAAW,GAHI,E,iFASjBC,KAAKC,SAAS,CACZF,WAAW,M,+BAIL,IAAD,EAEsBC,KAAKF,MAF3B,EAECI,MAER,OAJO,EAEQH,UAGN,2CAIP,kBAAC,IAAD,KACE,6BACE,6BACE,gCAAK,kBAAC,IAAD,CAAMT,GAAG,KAAT,UAAL,KACA,gCAAK,kBAAC,IAAD,CAAMA,GAAG,UAAT,UAAL,KACA,gCAAK,kBAAC,IAAD,CAAMA,GAAG,UAAT,WAAL,MAGF,8BACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOa,KAAK,IAAIC,OAAK,EAACC,UAAWjB,IACjC,kBAAC,IAAD,CAAOe,KAAK,SAASC,OAAK,EAACC,UAAWhB,IACtC,kBAAC,IAAD,CAAOc,KAAK,cAAcC,OAAK,EAACC,UAAWd,IAC3C,kBAAC,IAAD,CAAOY,KAAK,SAASC,OAAK,GACpB,kBAAC,EAAD,OAEN,kBAAC,IAAD,CAAOC,UAAWV,Y,GAzCdW,aAmDZC,E,YAEJ,WAAYV,GAAQ,IAAD,8BACjB,4CAAMA,KACDC,MAAQ,CACXI,MAAO,IAHQ,E,iFAQE,IAAD,OAClBM,MAAM,6CACHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAI,OAAI,EAAKX,SAAS,CAAEC,MAAOU,S,+BAG/B,IAEAV,EAAUF,KAAKF,MAAfI,MAER,OACE,6BACE,yCACA,4BACGA,EAAMW,KAAI,SAACC,EAAMC,GAAP,OACT,wBAAIC,IAAKD,GAAT,IAAkBD,EAAKpB,KAAvB,c,GAzBSuB,IAAMX,WAiCZV,ICrGKsB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAAS7B,MACvB,2DCZN8B,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBnB,MAAK,SAAAoB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.711bc431.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport { BrowserRouter, Switch, Route, Link } from \"react-router-dom\";\nimport './App.css';\n\nfunction Home() {\n  return <h2> Halaman Home </h2>\n}\n\nfunction ListView() {\n  return (\n    <div>\n      <h2> Semua User </h2>\n      <ul>\n        <Link to='user/ihsan'> Ihsan </Link>\n        <br />\n        <Link to='user/robert'> Robert </Link>\n      </ul>\n    </div>\n  );\n}\n\nfunction DetailView({ match }) {\n  return <h2> Ini Halaman {match.params.name} </h2>\n}\n\nfunction NoMatch() {\n  return <h2> 404, halaman tidak ditemukan </h2>\n}\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props)\n    this.state = {\n      isLoading: true\n    }\n  }\n\n  // Komsumsi API\n  componentDidMount() {\n    this.setState({\n      isLoading: false\n    })\n  }\n\n  render() {\n\n    const { items, isLoading } = this.state\n\n    if (isLoading) {\n      return <p>Loading.....</p>\n    }\n\n    return (\n      <BrowserRouter>\n        <div>\n          <nav>\n            <li> <Link to='/'> Home </Link> </li>\n            <li> <Link to='/users'> User </Link> </li>\n            <li> <Link to='/tabel'> Tabel </Link> </li>\n          </nav>\n\n          <main>\n            <Switch>\n              <Route path='/' exact component={Home} />\n              <Route path='/users' exact component={ListView} />\n              <Route path='/user/:name' exact component={DetailView} />\n              <Route path='/tabel' exact >\n                    <Column />\n              </Route>\n              <Route component={NoMatch} />\n            </Switch>\n          </main>\n        </div>\n      </BrowserRouter>\n    );\n  }\n\n}\n\nclass Column extends React.Component {\n\n  constructor(props) {\n    super(props)\n    this.state = {\n      items: []\n    }\n  }\n\n  // Komsumsi API\n  componentDidMount() {\n    fetch(\"http://jsonplaceholder.typicode.com/users\")\n      .then(Response => Response.json())\n      .then(data => this.setState({ items: data }))\n  }\n\n  render() {\n\n    const { items } = this.state\n\n    return (\n      <div>\n        <h2>Data User</h2>\n        <ul>\n          {items.map((item, index) =>\n            <li key={index}> {item.name} </li>)}\n        </ul>\n      </div>\n    );\n  }\n\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}